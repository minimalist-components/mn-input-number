{"version":3,"sources":["scripts/mn-number.class.js"],"names":["MnNumber","self","implemented","defaultAttr","attributes","some","attr","name","setAttribute","attribute","value","filter","input","_this","_ret","_classCallCheck","this","querySelector","Array","from","map","attributeSpecs","forEach","getAttribute","precision","isNaN","Number","mask","document","createElement","classList","add","appendChild","toFixed","replace","addEventListener","length","remove","event","key","preventDefault","clipboardData","getData","number","parseInt","_possibleConstructorReturn","window","MnInput","customElements","define"],"mappings":"yyBAAMA,UAAAA,SAAAA,iBACJ,QAAAA,UAAYC,MA6FV,QAASC,aAAYC,aACnB,MAAOC,YAAWC,KAAK,SAAAC,MAAA,MAAQA,MAAKC,OAASJ,YAAYI,OAG3D,QAASC,cAAaC,WACpB,GAAMC,OAAQN,WAAWO,OAAO,SAAAL,MAAA,MAAQA,MAAKC,OAASE,UAAUF,OAAM,GAAGG,KACzEE,OAAMJ,aAAaC,UAAUF,KAAMG,OAnGrB,GAAAG,OAAAC,IAAAC,iBAAAC,KAAAhB,UAChBC,KAAAA,MAAAA,2BAAAA,MAAAA,SAAAA,WAAAA,OAAAA,eAAAA,WAAAA,KAAAA,KAAaA,MACb,IAAMW,OAAQC,MAAKI,cAAc,QACjCL,OAAMJ,aAAa,OAAQ,SAM3B,IAAMJ,YAAac,MAChBC,KAAKN,MAAKT,YACVgB,IAAI,SAAAd,MACH,GAAMC,MAAOD,KAAKC,KACZG,MAAQJ,KAAKI,KAEnB,QAAQH,KAAAA,KAAMG,MAAAA,SAGZW,iBAEFd,KAAM,QAGNA,KAAM,QAGNA,KAAM,QAiEV,OA7DAc,gBACGV,OAAOT,aACPoB,QAAQd,cAEPK,MAAKU,aAAa,YAAY,WAChC,GAAMC,WAAaC,MAAMZ,MAAKU,aAAa,YAEvC,EADAG,OAAOb,MAAKU,aAAa,YAGvBI,KAAOC,SAASC,cAAc,MACpCF,MAAKG,UAAUC,IAAI,QACnBlB,MAAKmB,YAAYL,KAEjB,IAAMjB,OAAQgB,OAAOb,MAAKH,OAAOuB,QAAQT,UACzCX,OAAKH,MAAQA,MACbiB,KAAKnB,aAAa,QAASI,MAAMF,MAAMwB,QAAQ,IAAK,MACpDrB,MAAKiB,UAAUC,IAAI,aAEnBnB,MAAMuB,iBAAiB,UAAW,WAChCR,KAAKnB,aAAa,QAASI,MAAMF,MAAMwB,QAAQ,IAAK,QAGtDtB,MAAMuB,iBAAiB,QAAS,WAC9BR,KAAKnB,aAAa,QAASI,MAAMF,MAAMwB,QAAQ,IAAK,MAEhDtB,MAAMF,MAAM0B,OACdvB,MAAKiB,UAAUC,IAAI,aAEnBlB,MAAKiB,UAAUO,OAAO,eAI1BzB,MAAMuB,iBAAiB,SAAU,WAC/B,GAAItB,MAAKH,MAAO,CACd,GAAMA,QAAQgB,OAAOb,MAAKH,OAAOuB,QAAQT,UACzCX,OAAKH,MAAQ,EACbG,MAAKH,MAAQA,OACbiB,KAAKnB,aAAa,QAASI,MAAMF,MAAMwB,QAAQ,IAAK,MACpDrB,MAAKL,aAAa,QAASE,eAO/BE,MAAMuB,iBAAiB,UAAW,SAAAG,OACd,MAAdA,MAAMC,KACRD,MAAME,mBAIV5B,MAAMuB,iBAAiB,QAAS,SAAAG,OAC9BA,MAAME,gBACN,IAAM9B,OAAQ4B,MAAMG,cAAcC,QAAQ,QACpCC,OAASC,SAASlC,MACnBe,OAAMkB,UACT9B,MAAKH,MAAQiC,WAKnB7B,KAAOb,KAAP4C,2BAAAhC,MAAAC,2DA5FmBgC,OAAOC,QAyG9BD,QAAOE,eAAeC,OAAO,YAAajD","file":"mn-number.js","sourcesContent":["class MnNumber extends window.MnInput {\n  constructor(self) {\n    self = super(self)\n    const input = this.querySelector('input')\n    input.setAttribute('type', 'number')\n\n    // const mask = document.createElement('input')\n    // mask.classList.add('mask')\n    // this.appendChild(mask)\n\n    const attributes = Array\n      .from(this.attributes)\n      .map(attr => {\n        const name = attr.name\n        const value = attr.value\n\n        return {name, value}\n      })\n\n    const attributeSpecs = [\n      {\n        name: 'max',\n      },\n      {\n        name: 'min',\n      },\n      {\n        name: 'step',\n      },\n    ]\n\n    attributeSpecs\n      .filter(implemented)\n      .forEach(setAttribute)\n\n    if (this.getAttribute('decimal')) {\n      const precision = !isNaN(this.getAttribute('decimal'))\n        ? Number(this.getAttribute('decimal'))\n        : 2\n\n      const mask = document.createElement('div')\n      mask.classList.add('mask')\n      this.appendChild(mask)\n\n      const value = Number(this.value).toFixed(precision)\n      this.value = value\n      mask.setAttribute('value', input.value.replace('.', ','))\n      this.classList.add('has-value')\n\n      input.addEventListener('keydown', () => {\n        mask.setAttribute('value', input.value.replace('.', ','))\n      })\n\n      input.addEventListener('keyup', () => {\n        mask.setAttribute('value', input.value.replace('.', ','))\n\n        if (input.value.length) {\n          this.classList.add('has-value')\n        } else {\n          this.classList.remove('has-value')\n        }\n      })\n\n      input.addEventListener('change', () => {\n        if (this.value) {\n          const value = Number(this.value).toFixed(precision)\n          this.value = 0\n          this.value = value\n          mask.setAttribute('value', input.value.replace('.', ','))\n          this.setAttribute('value', value)\n          // mask.value = value + ' %'\n\n          // console.log('this.value', this.value)\n        }\n      })\n    } else {\n      input.addEventListener('keydown', event => {\n        if (event.key === ',') {\n          event.preventDefault()\n        }\n      })\n\n      input.addEventListener('paste', event => {\n        event.preventDefault()\n        const value = event.clipboardData.getData('Text')\n        const number = parseInt(value)\n        if (!isNaN(number)) {\n          this.value = number\n        }\n      })\n    }\n\n    return self\n\n    function implemented(defaultAttr) {\n      return attributes.some(attr => attr.name === defaultAttr.name)\n    }\n\n    function setAttribute(attribute) {\n      const value = attributes.filter(attr => attr.name === attribute.name)[0].value\n      input.setAttribute(attribute.name, value)\n    }\n  }\n}\n\nwindow.customElements.define('mn-number', MnNumber)\n"]}