{"version":3,"sources":["scripts/mn-number.class.js"],"names":["MnNumber","self","setMaskEvents","precision","isNaN","maskType","Number","mask","document","createElement","classList","add","instance","appendChild","value","toFixed","setAttribute","input","replace","addEventListener","length","remove","setIntegerEvents","event","preventDefault","clipboardData","getData","number","parseInt","nameAndValue","attr","name","implemented","defaultAttr","attributes","some","attribute","filter","_this","_ret","_classCallCheck","this","querySelector","Array","from","map","attributeSpecs","forEach","getAttribute","_possibleConstructorReturn","window","MnInput","customElements","define"],"mappings":"yyBAAMA,UAAAA,SAAAA,iBACJ,QAAAA,UAAYC,MA0CV,QAASC,iBACP,GAAMC,WAAaC,MAAMC,UAErB,EADAC,OAAOD,UAGLE,KAAOC,SAASC,cAAc,MAIpC,IAHAF,KAAKG,UAAUC,IAAI,QACnBC,SAASC,YAAYN,MAEjBK,SAASE,MAAO,CAClB,GAAMA,OAAQR,OAAOM,SAASE,OAAOC,QAAQZ,UAC7CS,UAASE,MAAQA,MACjBP,KAAKS,aAAa,QAASC,MAAMH,MAAMI,QAAQ,IAAK,MACpDN,SAASF,UAAUC,IAAI,aAGzBM,MAAME,iBAAiB,UAAW,WAChCZ,KAAKS,aAAa,QAASC,MAAMH,MAAMI,QAAQ,IAAK,QAGtDD,MAAME,iBAAiB,QAAS,WAC9BZ,KAAKS,aAAa,QAASC,MAAMH,MAAMI,QAAQ,IAAK,MAEhDD,MAAMH,MAAMM,OACdR,SAASF,UAAUC,IAAI,aAEvBC,SAASF,UAAUW,OAAO,eAI9BJ,MAAME,iBAAiB,SAAU,WAC/B,GAAIP,SAASE,MAAO,CAClB,GAAMA,QAAQR,OAAOM,SAASE,OAAOC,QAAQZ,UAC7CS,UAASE,MAAQ,EACjBF,SAASE,MAAQA,OACjBP,KAAKS,aAAa,QAASC,MAAMH,MAAMI,QAAQ,IAAK,MACpDN,SAASI,aAAa,QAASF,WAKrC,QAASQ,oBACPL,MAAME,iBAAiB,QAAS,SAAAI,OAC9BA,MAAMC,gBACN,IAAMV,OAAQS,MAAME,cAAcC,QAAQ,QACpCC,OAASC,SAASd,MACnBV,OAAMuB,UACTf,SAASE,MAAQa,UAIrBV,MAAME,iBAAiB,SAAU,WAC/BP,SAASE,MAAQc,SAASX,MAAMH,SAIpC,QAASe,cAAaC,MACpB,GAAMC,MAAOD,KAAKC,KACZjB,MAAQgB,KAAKhB,KAEnB,QAAQiB,KAAAA,KAAMjB,MAAAA,OAGhB,QAASkB,aAAYC,aACnB,MAAOC,YAAWC,KAAK,SAAAL,MAAA,MAAQA,MAAKC,OAASE,YAAYF,OAG3D,QAASf,cAAaoB,WACpB,GAAMtB,OAAQoB,WAAWG,OAAO,SAAAP,MAAA,MAAQA,MAAKC,OAASK,UAAUL,OAAM,GAAGjB,KACzEG,OAAMD,aAAaoB,UAAUL,KAAMjB,OA/GrB,GAAAwB,OAAAC,IAAAC,iBAAAC,KAAAzC,UAChBC,KAAAA,MAAAA,2BAAAA,MAAAA,SAAAA,WAAAA,OAAAA,eAAAA,WAAAA,KAAAA,KAAaA,MACb,IAAMW,UAAAA,MACAK,MAAQqB,MAAKI,cAAc,QACjCzB,OAAMD,aAAa,OAAQ,SAE3B,IAAMkB,YAAaS,MAChBC,KAAKN,MAAKJ,YACVW,IAAIhB,cAEDiB,iBAEFf,KAAM,QAGNA,KAAM,QAGNA,KAAM,QAIVe,gBACGT,OAAOL,aACPe,QAAQ/B,aAEX,IAAMX,UAAWiC,MAAKU,aAAa,YAC9BV,MAAKU,aAAa,eAClBV,MAAKU,aAAa,WAYvB,OAVA3C,UACIH,gBACAoB,mBAEJL,MAAME,iBAAiB,OAAQ,WACxBF,MAAMH,QACTG,MAAMH,MAAQ,MAIlByB,KAAOtC,KAAPgD,2BAAAX,MAAAC,2DAzCmBW,OAAOC,QAqH9BD,QAAOE,eAAeC,OAAO,YAAarD","file":"mn-number.js","sourcesContent":["class MnNumber extends window.MnInput {\n  constructor(self) {\n    self = super(self)\n    const instance = this\n    const input = this.querySelector('input')\n    input.setAttribute('type', 'number')\n\n    const attributes = Array\n      .from(this.attributes)\n      .map(nameAndValue)\n\n    const attributeSpecs = [\n      {\n        name: 'max',\n      },\n      {\n        name: 'min',\n      },\n      {\n        name: 'step',\n      },\n    ]\n\n    attributeSpecs\n      .filter(implemented)\n      .forEach(setAttribute)\n\n    const maskType = this.getAttribute('decimal')\n      || this.getAttribute('percentage')\n      || this.getAttribute('currency')\n\n    maskType\n      ? setMaskEvents()\n      : setIntegerEvents()\n\n    input.addEventListener('blur', () => {\n      if (!input.value) {\n        input.value = ''\n      }\n    })\n\n    return self\n\n    function setMaskEvents() {\n      const precision = !isNaN(maskType)\n        ? Number(maskType)\n        : 2\n\n      const mask = document.createElement('div')\n      mask.classList.add('mask')\n      instance.appendChild(mask)\n\n      if (instance.value) {\n        const value = Number(instance.value).toFixed(precision)\n        instance.value = value\n        mask.setAttribute('value', input.value.replace('.', ','))\n        instance.classList.add('has-value')\n      }\n\n      input.addEventListener('keydown', () => {\n        mask.setAttribute('value', input.value.replace('.', ','))\n      })\n\n      input.addEventListener('keyup', () => {\n        mask.setAttribute('value', input.value.replace('.', ','))\n\n        if (input.value.length) {\n          instance.classList.add('has-value')\n        } else {\n          instance.classList.remove('has-value')\n        }\n      })\n\n      input.addEventListener('change', () => {\n        if (instance.value) {\n          const value = Number(instance.value).toFixed(precision)\n          instance.value = 0\n          instance.value = value\n          mask.setAttribute('value', input.value.replace('.', ','))\n          instance.setAttribute('value', value)\n        }\n      })\n    }\n\n    function setIntegerEvents() {\n      input.addEventListener('paste', event => {\n        event.preventDefault()\n        const value = event.clipboardData.getData('Text')\n        const number = parseInt(value)\n        if (!isNaN(number)) {\n          instance.value = number\n        }\n      })\n\n      input.addEventListener('change', () => {\n        instance.value = parseInt(input.value)\n      })\n    }\n\n    function nameAndValue(attr) {\n      const name = attr.name\n      const value = attr.value\n\n      return {name, value}\n    }\n\n    function implemented(defaultAttr) {\n      return attributes.some(attr => attr.name === defaultAttr.name)\n    }\n\n    function setAttribute(attribute) {\n      const value = attributes.filter(attr => attr.name === attribute.name)[0].value\n      input.setAttribute(attribute.name, value)\n    }\n  }\n}\n\nwindow.customElements.define('mn-number', MnNumber)\n"]}