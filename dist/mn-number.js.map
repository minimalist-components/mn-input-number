{"version":3,"sources":["scripts/mn-number.class.js"],"names":["MnNumber","self","implemented","defaultAttr","attributes","some","attr","name","setAttribute","attribute","value","filter","input","_this","_ret","_classCallCheck","this","querySelector","Array","from","map","attributeSpecs","forEach","addEventListener","event","invalidCharacters","isInvalidCharacter","indexOf","key","preventDefault","console","log","_possibleConstructorReturn","window","MnInput","customElements","define"],"mappings":"yyBAAMA,UAAAA,SAAAA,iBACJ,QAAAA,UAAYC,MAiDV,QAASC,aAAYC,aACnB,MAAOC,YAAWC,KAAK,SAAAC,MAAA,MAAQA,MAAKC,OAASJ,YAAYI,OAG3D,QAASC,cAAaC,WACpB,GAAMC,OAAQN,WAAWO,OAAO,SAAAL,MAAA,MAAQA,MAAKC,OAASE,UAAUF,OAAM,GAAGG,KACzEE,OAAMJ,aAAaC,UAAUF,KAAMG,OAvDrB,GAAAG,OAAAC,IAAAC,iBAAAC,KAAAhB,UAChBC,KAAAA,MAAAA,2BAAAA,MAAAA,SAAAA,WAAAA,OAAAA,eAAAA,WAAAA,KAAAA,KAAaA,MACb,IAAMW,OAAQC,MAAKI,cAAc,QACjCL,OAAMJ,aAAa,OAAQ,SAE3B,IAAMJ,YAAac,MAChBC,KAAKN,MAAKT,YACVgB,IAAI,SAAAd,MACH,GAAMC,MAAOD,KAAKC,KACZG,MAAQJ,KAAKI,KAEnB,QAAQH,KAAAA,KAAMG,MAAAA,SAGZW,iBAEFd,KAAM,QAGNA,KAAM,QAGNA,KAAM,QAyBV,OArBAc,gBACGV,OAAOT,aACPoB,QAAQd,cAEXI,MAAMW,iBAAiB,UAAW,SAAAC,OAChC,GAAMC,oBACJ,KAGIC,mBAAqBD,kBAAkBE,QAAQH,MAAMI,MAAQ,CAC/DF,qBACFF,MAAMK,mBAIVjB,MAAMW,iBAAiB,SAAU,WAG/BO,QAAQC,IAAInB,MAAMF,SAGpBI,KAAOb,KAAP+B,2BAAAnB,MAAAC,2DAhDmBmB,OAAOC,QA6D9BD,QAAOE,eAAeC,OAAO,YAAapC","file":"mn-number.js","sourcesContent":["class MnNumber extends window.MnInput {\n  constructor(self) {\n    self = super(self)\n    const input = this.querySelector('input')\n    input.setAttribute('type', 'number')\n\n    const attributes = Array\n      .from(this.attributes)\n      .map(attr => {\n        const name = attr.name\n        const value = attr.value\n\n        return {name, value}\n      })\n\n    const attributeSpecs = [\n      {\n        name: 'max',\n      },\n      {\n        name: 'min',\n      },\n      {\n        name: 'step',\n      },\n    ]\n\n    attributeSpecs\n      .filter(implemented)\n      .forEach(setAttribute)\n\n    input.addEventListener('keydown', event => {\n      const invalidCharacters = [\n        ','\n      ]\n\n      const isInvalidCharacter = invalidCharacters.indexOf(event.key) >= 0\n      if (isInvalidCharacter) {\n        event.preventDefault()\n      }\n    })\n\n    input.addEventListener('change', () => {\n    //   input.value = input.value.replace(',', '.')\n    //   this.value = input.value\n      console.log(input.value)\n    })\n\n    return self\n\n    function implemented(defaultAttr) {\n      return attributes.some(attr => attr.name === defaultAttr.name)\n    }\n\n    function setAttribute(attribute) {\n      const value = attributes.filter(attr => attr.name === attribute.name)[0].value\n      input.setAttribute(attribute.name, value)\n    }\n  }\n}\n\nwindow.customElements.define('mn-number', MnNumber)\n"]}