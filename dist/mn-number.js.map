{"version":3,"sources":["scripts/mn-number.class.js"],"names":["MnNumber","self","implemented","defaultAttr","attributes","some","attr","name","setAttribute","attribute","value","filter","input","_this","_ret","_classCallCheck","this","querySelector","Array","from","map","attributeSpecs","forEach","maskType","getAttribute","precision","isNaN","Number","mask","document","createElement","classList","add","appendChild","toFixed","replace","addEventListener","length","remove","event","preventDefault","clipboardData","getData","number","parseInt","_possibleConstructorReturn","window","MnInput","customElements","define"],"mappings":"yyBAAMA,UAAAA,SAAAA,iBACJ,QAAAA,UAAYC,MAgGV,QAASC,aAAYC,aACnB,MAAOC,YAAWC,KAAK,SAAAC,MAAA,MAAQA,MAAKC,OAASJ,YAAYI,OAG3D,QAASC,cAAaC,WACpB,GAAMC,OAAQN,WAAWO,OAAO,SAAAL,MAAA,MAAQA,MAAKC,OAASE,UAAUF,OAAM,GAAGG,KACzEE,OAAMJ,aAAaC,UAAUF,KAAMG,OAtGrB,GAAAG,OAAAC,IAAAC,iBAAAC,KAAAhB,UAChBC,KAAAA,MAAAA,2BAAAA,MAAAA,SAAAA,WAAAA,OAAAA,eAAAA,WAAAA,KAAAA,KAAaA,MACb,IAAMW,OAAQC,MAAKI,cAAc,QACjCL,OAAMJ,aAAa,OAAQ,SAE3B,IAAMJ,YAAac,MAChBC,KAAKN,MAAKT,YACVgB,IAAI,SAAAd,MACH,GAAMC,MAAOD,KAAKC,KACZG,MAAQJ,KAAKI,KAEnB,QAAQH,KAAAA,KAAMG,MAAAA,SAGZW,iBAEFd,KAAM,QAGNA,KAAM,QAGNA,KAAM,QAIVc,gBACGV,OAAOT,aACPoB,QAAQd,aAEX,IAAMe,UAAWV,MAAKW,aAAa,YAC9BX,MAAKW,aAAa,eAClBX,MAAKW,aAAa,WAEvB,IAAID,SAAU,CACZ,GAAME,WAAaC,MAAMH,UAErB,EADAI,OAAOJ,UAGLK,KAAOC,SAASC,cAAc,MAIpC,IAHAF,KAAKG,UAAUC,IAAI,QACnBnB,MAAKoB,YAAYL,MAEbf,MAAKH,MAAO,CACd,GAAMA,OAAQiB,OAAOd,MAAKH,OAAOwB,QAAQT,UACzCZ,OAAKH,MAAQA,MACbkB,KAAKpB,aAAa,QAASI,MAAMF,MAAMyB,QAAQ,IAAK,MACpDtB,MAAKkB,UAAUC,IAAI,aAGrBpB,MAAMwB,iBAAiB,UAAW,WAChCR,KAAKpB,aAAa,QAASI,MAAMF,MAAMyB,QAAQ,IAAK,QAGtDvB,MAAMwB,iBAAiB,QAAS,WAC9BR,KAAKpB,aAAa,QAASI,MAAMF,MAAMyB,QAAQ,IAAK,MAEhDvB,MAAMF,MAAM2B,OACdxB,MAAKkB,UAAUC,IAAI,aAEnBnB,MAAKkB,UAAUO,OAAO,eAI1B1B,MAAMwB,iBAAiB,SAAU,WAC/B,GAAIvB,MAAKH,MAAO,CACd,GAAMA,QAAQiB,OAAOd,MAAKH,OAAOwB,QAAQT,UACzCZ,OAAKH,MAAQ,EACbG,MAAKH,MAAQA,OACbkB,KAAKpB,aAAa,QAASI,MAAMF,MAAMyB,QAAQ,IAAK,MACpDtB,MAAKL,aAAa,QAASE,eAI/BE,OAAMwB,iBAAiB,QAAS,SAAAG,OAC9BA,MAAMC,gBACN,IAAM9B,OAAQ6B,MAAME,cAAcC,QAAQ,QACpCC,OAASC,SAASlC,MACnBgB,OAAMiB,UACT9B,MAAKH,MAAQiC,UAIjB/B,MAAMwB,iBAAiB,SAAU,WAC/BvB,MAAKH,MAAQkC,SAAShC,MAAMF,QAUhC,OANAE,OAAMwB,iBAAiB,OAAQ,WACxBxB,MAAMF,QACTE,MAAMF,MAAQ,MAIlBI,KAAOb,KAAP4C,2BAAAhC,MAAAC,2DA/FmBgC,OAAOC,QA4G9BD,QAAOE,eAAeC,OAAO,YAAajD","file":"mn-number.js","sourcesContent":["class MnNumber extends window.MnInput {\n  constructor(self) {\n    self = super(self)\n    const input = this.querySelector('input')\n    input.setAttribute('type', 'number')\n\n    const attributes = Array\n      .from(this.attributes)\n      .map(attr => {\n        const name = attr.name\n        const value = attr.value\n\n        return {name, value}\n      })\n\n    const attributeSpecs = [\n      {\n        name: 'max',\n      },\n      {\n        name: 'min',\n      },\n      {\n        name: 'step',\n      },\n    ]\n\n    attributeSpecs\n      .filter(implemented)\n      .forEach(setAttribute)\n\n    const maskType = this.getAttribute('decimal')\n      || this.getAttribute('percentage')\n      || this.getAttribute('currency')\n\n    if (maskType) {\n      const precision = !isNaN(maskType)\n        ? Number(maskType)\n        : 2\n\n      const mask = document.createElement('div')\n      mask.classList.add('mask')\n      this.appendChild(mask)\n\n      if (this.value) {\n        const value = Number(this.value).toFixed(precision)\n        this.value = value\n        mask.setAttribute('value', input.value.replace('.', ','))\n        this.classList.add('has-value')\n      }\n\n      input.addEventListener('keydown', () => {\n        mask.setAttribute('value', input.value.replace('.', ','))\n      })\n\n      input.addEventListener('keyup', () => {\n        mask.setAttribute('value', input.value.replace('.', ','))\n\n        if (input.value.length) {\n          this.classList.add('has-value')\n        } else {\n          this.classList.remove('has-value')\n        }\n      })\n\n      input.addEventListener('change', () => {\n        if (this.value) {\n          const value = Number(this.value).toFixed(precision)\n          this.value = 0\n          this.value = value\n          mask.setAttribute('value', input.value.replace('.', ','))\n          this.setAttribute('value', value)\n        }\n      })\n    } else {\n      input.addEventListener('paste', event => {\n        event.preventDefault()\n        const value = event.clipboardData.getData('Text')\n        const number = parseInt(value)\n        if (!isNaN(number)) {\n          this.value = number\n        }\n      })\n\n      input.addEventListener('change', () => {\n        this.value = parseInt(input.value)\n      })\n    }\n\n    input.addEventListener('blur', () => {\n      if (!input.value) {\n        input.value = ''\n      }\n    })\n\n    return self\n\n    function implemented(defaultAttr) {\n      return attributes.some(attr => attr.name === defaultAttr.name)\n    }\n\n    function setAttribute(attribute) {\n      const value = attributes.filter(attr => attr.name === attribute.name)[0].value\n      input.setAttribute(attribute.name, value)\n    }\n  }\n}\n\nwindow.customElements.define('mn-number', MnNumber)\n"]}