{"version":3,"sources":["scripts/mn-number.class.js"],"names":["MnNumber","self","implemented","defaultAttr","attributes","some","attr","name","setAttribute","attribute","value","filter","input","_this","_ret","_classCallCheck","this","querySelector","Array","from","map","attributeSpecs","forEach","getAttribute","precision","isNaN","Number","addEventListener","toFixed","console","log","_possibleConstructorReturn","window","MnInput","customElements","define"],"mappings":"yyBAAMA,UAAAA,SAAAA,iBACJ,QAAAA,UAAYC,MAuDV,QAASC,aAAYC,aACnB,MAAOC,YAAWC,KAAK,SAAAC,MAAA,MAAQA,MAAKC,OAASJ,YAAYI,OAG3D,QAASC,cAAaC,WACpB,GAAMC,OAAQN,WAAWO,OAAO,SAAAL,MAAA,MAAQA,MAAKC,OAASE,UAAUF,OAAM,GAAGG,KACzEE,OAAMJ,aAAaC,UAAUF,KAAMG,OA7DrB,GAAAG,OAAAC,IAAAC,iBAAAC,KAAAhB,UAChBC,KAAAA,MAAAA,2BAAAA,MAAAA,SAAAA,WAAAA,OAAAA,eAAAA,WAAAA,KAAAA,KAAaA,MACb,IAAMW,OAAQC,MAAKI,cAAc,QACjCL,OAAMJ,aAAa,OAAQ,SAM3B,IAAMJ,YAAac,MAChBC,KAAKN,MAAKT,YACVgB,IAAI,SAAAd,MACH,GAAMC,MAAOD,KAAKC,KACZG,MAAQJ,KAAKI,KAEnB,QAAQH,KAAAA,KAAMG,MAAAA,SAGZW,iBAEFd,KAAM,QAGNA,KAAM,QAGNA,KAAM,QA2BV,OAvBAc,gBACGV,OAAOT,aACPoB,QAAQd,cAEPK,MAAKU,aAAa,aAAY,WAChC,GAAMC,WAAaC,MAAMZ,MAAKU,aAAa,YAEvC,EADAG,OAAOb,MAAKU,aAAa,WAG7BX,OAAMe,iBAAiB,SAAU,WAC/B,GAAId,MAAKH,MAAO,CACd,GAAMA,OAAQgB,OAAOb,MAAKH,OAAOkB,QAAQJ,UACzCX,OAAKH,MAAQ,EACbG,MAAKH,MAAQA,MACbG,MAAKL,aAAa,QAASE,OAG3BmB,QAAQC,IAAI,aAAcjB,MAAKH,aAMrCI,KAAOb,KAAP8B,2BAAAlB,MAAAC,2DAtDmBkB,OAAOC,QAmE9BD,QAAOE,eAAeC,OAAO,YAAanC","file":"mn-number.js","sourcesContent":["class MnNumber extends window.MnInput {\n  constructor(self) {\n    self = super(self)\n    const input = this.querySelector('input')\n    input.setAttribute('type', 'number')\n\n    // const mask = document.createElement('input')\n    // mask.classList.add('mask')\n    // this.appendChild(mask)\n\n    const attributes = Array\n      .from(this.attributes)\n      .map(attr => {\n        const name = attr.name\n        const value = attr.value\n\n        return {name, value}\n      })\n\n    const attributeSpecs = [\n      {\n        name: 'max',\n      },\n      {\n        name: 'min',\n      },\n      {\n        name: 'step',\n      },\n    ]\n\n    attributeSpecs\n      .filter(implemented)\n      .forEach(setAttribute)\n\n    if (this.getAttribute('decimal')) {\n      const precision = !isNaN(this.getAttribute('decimal'))\n        ? Number(this.getAttribute('decimal'))\n        : 2\n\n      input.addEventListener('change', () => {\n        if (this.value) {\n          const value = Number(this.value).toFixed(precision)\n          this.value = 0\n          this.value = value\n          this.setAttribute('value', value)\n          // mask.value = value + ' %'\n\n          console.log('this.value', this.value)\n        }\n      })\n\n    }\n\n    return self\n\n    function implemented(defaultAttr) {\n      return attributes.some(attr => attr.name === defaultAttr.name)\n    }\n\n    function setAttribute(attribute) {\n      const value = attributes.filter(attr => attr.name === attribute.name)[0].value\n      input.setAttribute(attribute.name, value)\n    }\n  }\n}\n\nwindow.customElements.define('mn-number', MnNumber)\n"]}