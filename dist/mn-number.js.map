{"version":3,"sources":["scripts/mn-number.class.js"],"names":["MnNumber","self","nameAndValue","attr","name","value","implemented","defaultAttr","attributes","some","setAttribute","attribute","filter","input","_this","_ret","_classCallCheck","this","instance","querySelector","maskAttribute","getAttribute","undefined","precision","isNaN","Number","Array","from","map","forEach","maskType","mask","document","createElement","classList","add","appendChild","toFixed","replace","addEventListener","remove","event","preventDefault","clipboardData","getData","number","parseInt","_possibleConstructorReturn","isPercentage","val","length","contains","createEvent","initEvent","dispatchEvent","window","MnInput","customElements","define"],"mappings":"sxCAAMA,SAAAA,SAAAA,iBACJ,QAAAA,UAAYC,MAqHV,QAASC,cAAaC,MAIpB,OAAQC,KAHKD,KAAKC,KAGJC,MAFAF,KAAKE,OAKrB,QAASC,aAAYC,aACnB,MAAOC,YAAWC,KAAK,SAAAN,MAAA,MAAQA,MAAKC,OAASG,YAAYH,OAG3D,QAASM,cAAaC,WACpB,GAAMN,OAAQG,WAAWI,OAAO,SAAAT,MAAA,MAAQA,MAAKC,OAASO,UAAUP,OAAM,GAAGC,KACzEQ,OAAMH,aAAaC,UAAUP,KAAMC,OAlIrB,GAAAS,OAAAC,IAAAC,iBAAAC,KAAAjB,UAChBC,KAAAA,MAAAA,2BAAAA,MAAAA,SAAAA,WAAAA,OAAAA,eAAAA,WAAAA,KAAAA,KAAaA,MACb,IAAMiB,UAAAA,MACAL,MAAQC,MAAKK,cAAc,QACjCL,OAAKD,MAAQA,MACbA,MAAMH,aAAa,OAAQ,SAE3B,IAAMU,eAAgBN,MAAKO,aAAa,YACnCP,MAAKO,aAAa,eAClBP,MAAKO,aAAa,iBAClBC,EAELR,OAAKS,UAAaC,MAAMJ,eAEpB,EADAK,OAAOL,cAGX,IAAMZ,YAAakB,MAChBC,KAAKb,MAAKN,YACVoB,IAAI1B,gBAIHE,KAAM,QAGNA,KAAM,QAGNA,KAAM,SAKPQ,OAAON,aACPuB,QAAQnB,aAEX,IAAMoB,UAAWhB,MAAKO,aAAa,YAAc,WAC5CP,MAAKO,aAAa,eAAiB,cACnCP,MAAKO,aAAa,aAAe,gBACjCC,EAYL,OAVAQ,UAYA,WACE,GAAMC,MAAOC,SAASC,cAAc,MAIpC,IAHAF,KAAKG,UAAUC,IAAI,QACnBjB,SAASkB,YAAYL,OAEhBP,MAAMN,SAASb,OAAQ,CAC1B,GAAMA,OAAqB,eAAbyB,SACVL,OAAwB,IAAjBP,SAASb,OAAagC,QAAQnB,SAASK,WAC9CE,OAAOP,SAASb,OAAOgC,QAAQnB,SAASK,UAC5CL,UAASb,MAAQA,MACjB0B,KAAKrB,aAAa,QAASG,MAAMR,MAAMiC,QAAQ,IAAK,MAItDzB,MAAM0B,iBAAiB,UAAW,WAChCR,KAAKrB,aAAa,QAASG,MAAMR,MAAMiC,QAAQ,IAAK,QAGtDzB,MAAM0B,iBAAiB,QAAS,WAC9BR,KAAKrB,aAAa,QAASG,MAAMR,MAAMiC,QAAQ,IAAK,QAStDzB,MAAM0B,iBAAiB,SAAU,WAC/B,IAAKf,MAAMN,SAASb,OAAQ,CAC1B,GAAMA,QAAqB,eAAbyB,SACVL,OAAwB,IAAjBP,SAASb,OAAagC,QAAQnB,SAASK,WAC9CE,OAAOP,SAASb,OAAOgC,QAAQnB,SAASK,UAC5CL,UAASb,MAAQ,EACjBa,SAASb,MAAQA,OACjB0B,KAAKrB,aAAa,QAASG,MAAMR,MAAMiC,QAAQ,IAAK,MACpDpB,SAASR,aAAa,QAASL,QAC/Ba,SAASgB,UAAUM,OAAO,gBAKhC,WACE3B,MAAM0B,iBAAiB,QAAS,SAAAE,OAC9BA,MAAMC,gBACN,IAAMrC,OAAQoC,MAAME,cAAcC,QAAQ,QACpCC,OAASC,SAASzC,MACnBmB,OAAMqB,UACT3B,SAASb,MAAQwC,UAIrBhC,MAAM0B,iBAAiB,SAAU,WAC/B,GAAMlC,OAAQyC,SAASjC,MAAMR,QACVmB,MAAMnB,SAGvBa,SAASb,MAAQA,OAGnBa,SAASgB,UAAUM,OAAO,eApE9B3B,MAAM0B,iBAAiB,OAAQ,WACxB1B,MAAMR,QACTQ,MAAMR,MAAQ,MAIlBU,KAAOd,KAAP8C,2BAAAjC,MAAAC,oGAoFA,GAAMiC,cAAe/B,KAAKI,aAAa,cACjC4B,KAAOhC,KAAKJ,MAAMR,KACxB,OAAOY,MAAKJ,MAAMR,MACd2C,aAES,IAANC,IAAa,IACdA,QACF3B,iBAGIjB,OAWR,GAVIA,QAAUoB,OAAOD,MAAMnB,SACzBY,KAAKJ,MAAMR,MAAQA,OAGjBY,KAAKJ,MAAMR,MAAM6C,OACnBjC,KAAKiB,UAAUC,IAAI,aAEnBlB,KAAKiB,UAAUM,OAAO,cAGnBvB,KAAKiB,UAAUiB,SAAS,UAAW,CACtClC,KAAKiB,UAAUC,IAAI,SACnB,IAAMM,OAAQT,SAASoB,YAAY,aACnCX,OAAMY,UAAU,UAAU,GAAO,GACjCpC,KAAKJ,MAAMyC,cAAcb,sBAjKRc,OAAOC,QAuK9BD,QAAOE,eAAeC,OAAO,YAAa1D","file":"mn-number.js","sourcesContent":["class MnNumber extends window.MnInput {\n  constructor(self) {\n    self = super(self)\n    const instance = this\n    const input = this.querySelector('input')\n    this.input = input\n    input.setAttribute('type', 'number')\n\n    const maskAttribute = this.getAttribute('decimal')\n      || this.getAttribute('percentage')\n      || this.getAttribute('currency')\n      || undefined\n\n    this.precision = !isNaN(maskAttribute)\n      ? Number(maskAttribute)\n      : 2\n\n    const attributes = Array\n      .from(this.attributes)\n      .map(nameAndValue)\n\n    const attributeSpecs = [\n      {\n        name: 'max',\n      },\n      {\n        name: 'min',\n      },\n      {\n        name: 'step',\n      },\n    ]\n\n    attributeSpecs\n      .filter(implemented)\n      .forEach(setAttribute)\n\n    const maskType = this.getAttribute('decimal') && 'decimal'\n      || this.getAttribute('percentage') && 'percentage'\n      || this.getAttribute('currency') && 'currency'\n      || undefined\n\n    maskType\n      ? setMaskEvents()\n      : setIntegerEvents()\n\n    input.addEventListener('blur', () => {\n      if (!input.value) {\n        input.value = ''\n      }\n    })\n\n    return self\n\n    function setMaskEvents() {\n      const mask = document.createElement('div')\n      mask.classList.add('mask')\n      instance.appendChild(mask)\n      // console.log(!isNaN(instance.value))\n      if (!isNaN(instance.value)) {\n        const value = maskType === 'percentage'\n          ? Number(instance.value * 100).toFixed(instance.precision)\n          : Number(instance.value).toFixed(instance.precision)\n        instance.value = value\n        mask.setAttribute('value', input.value.replace('.', ','))\n        // instance.classList.add('has-value')\n      }\n\n      input.addEventListener('keydown', () => {\n        mask.setAttribute('value', input.value.replace('.', ','))\n      })\n\n      input.addEventListener('keyup', () => {\n        mask.setAttribute('value', input.value.replace('.', ','))\n\n        // if (input.value.length) {\n        //   instance.classList.add('has-value')\n        // } else {\n        //   instance.classList.remove('has-value')\n        // }\n      })\n\n      input.addEventListener('change', () => {\n        if (!isNaN(instance.value)) {\n          const value = maskType === 'percentage'\n            ? Number(instance.value * 100).toFixed(instance.precision)\n            : Number(instance.value).toFixed(instance.precision)\n          instance.value = 0\n          instance.value = value\n          mask.setAttribute('value', input.value.replace('.', ','))\n          instance.setAttribute('value', value)\n          instance.classList.remove('change')\n        }\n      })\n    }\n\n    function setIntegerEvents() {\n      input.addEventListener('paste', event => {\n        event.preventDefault()\n        const value = event.clipboardData.getData('Text')\n        const number = parseInt(value)\n        if (!isNaN(number)) {\n          instance.value = number\n        }\n      })\n\n      input.addEventListener('change', () => {\n        const value = parseInt(input.value)\n        const isANumber = !isNaN(value)\n\n        if (isANumber) {\n          instance.value = value\n        }\n\n        instance.classList.remove('change')\n      })\n    }\n\n    function nameAndValue(attr) {\n      const name = attr.name\n      const value = attr.value\n\n      return {name, value}\n    }\n\n    function implemented(defaultAttr) {\n      return attributes.some(attr => attr.name === defaultAttr.name)\n    }\n\n    function setAttribute(attribute) {\n      const value = attributes.filter(attr => attr.name === attribute.name)[0].value\n      input.setAttribute(attribute.name, value)\n    }\n  }\n\n  get value() {\n    const isPercentage = this.getAttribute('percentage')\n    const val = +this.input.value\n    return this.input.value\n      ? isPercentage\n        // ? val / 100\n        ? (val * 100) / 10000\n        : val\n      : undefined\n  }\n\n  set value(value) {\n    if (value && !Number.isNaN(value)) {\n      this.input.value = value\n    }\n\n    if (this.input.value.length) {\n      this.classList.add('has-value')\n    } else {\n      this.classList.remove('has-value')\n    }\n\n    if (!this.classList.contains('change')) {\n      this.classList.add('change')\n      const event = document.createEvent('HTMLEvents')\n      event.initEvent('change', false, true)\n      this.input.dispatchEvent(event)\n    }\n\n  }\n}\n\nwindow.customElements.define('mn-number', MnNumber)\n"]}